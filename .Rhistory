#breaks=b esplicita i punti di break degli intervalli dei valori di x che delimitano le classi
#probability=TRUE le colonne rappresentano le frequenze relative e non assolute
#las=2 mette i valori delle frequenze relative in verticale
hist(x, breaks=nClassi, xlab=xlabel, ylab="Frequenze relative", probability = TRUE,
include.lowest = FALSE, col="slategray1", lty=4, las=1,
col.main="midnightblue", col.axis="midnightblue", fg="midnightblue", font.main=15,
font.lab=14, col.lab="midnightblue", border="midnightblue")
}
istogramma(valori,"numeri",6)
istogramma <- function(x,xlabel,nClassi){
#breaks=b esplicita i punti di break degli intervalli dei valori di x che delimitano le classi
#probability=TRUE le colonne rappresentano le frequenze relative e non assolute
#las=2 mette i valori delle frequenze relative in verticale
browser()
hist(x, breaks=nClassi, xlab=xlabel, ylab="Frequenze relative", probability = TRUE,
include.lowest = TRUE, col="slategray1", lty=4, las=1,
col.main="midnightblue", col.axis="midnightblue", fg="midnightblue", font.main=15,
font.lab=14, col.lab="midnightblue", border="midnightblue")
}
istogramma(valori,"numeri",6)
nClassi
x
hist(x,5)
hist(x,8)
?hist
istogramma <- function(x,xlabel,n){
#breaks=b esplicita i punti di break degli intervalli dei valori di x che delimitano le classi
#probability=TRUE le colonne rappresentano le frequenze relative e non assolute
#las=2 mette i valori delle frequenze relative in verticale
browser()
#####################################à
r = range(x)
ampiezzaClassi = (r[2]-r[1])/n
classi=1:(n+1)
classi[1]=r[1]
for (i in 2:(n+1)){
classi[i]=classi[i-1]+ampiezzaClassi
}
classi[1]=classi[1]-0.001
classi[n+1]=classi[n+1]+0.001
########################################
hist(x, breaks=classi, xlab=xlabel, ylab="Frequenze relative", probability = TRUE,
include.lowest = TRUE, col="slategray1", lty=4, las=1,
col.main="midnightblue", col.axis="midnightblue", fg="midnightblue", font.main=15,
font.lab=14, col.lab="midnightblue", border="midnightblue")
}
istogramma(valori,"numeri",6)
istogramma(valori,"numeri",7)
istogramma <- function(x,xlabel,n){
#breaks=b esplicita i punti di break degli intervalli dei valori di x che delimitano le classi
#probability=TRUE le colonne rappresentano le frequenze relative e non assolute
#las=2 mette i valori delle frequenze relative in verticale
#####################################à
r = range(x)
ampiezzaClassi = (r[2]-r[1])/n
classi=1:(n+1)
classi[1]=r[1]
for (i in 2:(n+1)){
classi[i]=classi[i-1]+ampiezzaClassi
}
classi[1]=classi[1]-0.001
classi[n+1]=classi[n+1]+0.001
########################################
hist(x, breaks=classi, xlab=xlabel, ylab="Frequenze relative", probability = TRUE,
include.lowest = TRUE, col="slategray1", lty=4, las=1,
col.main="midnightblue", col.axis="midnightblue", fg="midnightblue", font.main=15,
font.lab=14, col.lab="midnightblue", border="midnightblue")
}
istogramma(valori,"numeri",7)
istogramma(valori,"numeri",8)
istogramma(valori,"numeri",9)
summary(x)
#' x2=rnorm(90,mean=170,sd = 20)
#' confrontoDistribuzioni(x,x2,"Popolazione1","Popolazione2")
confrontoDistribuzioni <- function(x,y,labelx,labely){
plot(x, ylab="Valori", pch=19, col="red", main="Confronto distribuzioni", col.main="blue3",
font.main=18, cex.main=1.7, font.lab=18)
points(y, col="green3", pch=8)
leg.txt=c(labelx,labely)
legend("topright", leg.txt, pch=c(19,8), col=c("red","green3"))
}
x
y
x2=rnorm(90,mean=170,sd = 20)
x=rnorm(100,mean=165,10)
confrontoDistribuzioni(x,x2,"Popolazione1","Popolazione2")
?plot
min(x)
min(y)
min(min(x),min(y))
min(x,y)
confrontoDistribuzioni <- function(x,y,labelx,labely){
plot(x, ylim=range(min(x,y),max(x,y)), y2),ylab="Valori", pch=19, col="red", main="Confronto distribuzioni", col.main="blue3",
font.main=18, cex.main=1.7, font.lab=18)
points(y, col="green3", pch=8)
leg.txt=c(labelx,labely)
legend("topright", leg.txt, pch=c(19,8), col=c("red","green3"))
}
confrontoDistribuzioni <- function(x,y,labelx,labely){
plot(x, ylim=range(min(x,y),max(x,y))),ylab="Valori", pch=19, col="red", main="Confronto distribuzioni", col.main="blue3",
font.main=18, cex.main=1.7, font.lab=18)
points(y, col="green3", pch=8)
leg.txt=c(labelx,labely)
legend("topright", leg.txt, pch=c(19,8), col=c("red","green3"))
}
confrontoDistribuzioni <- function(x,y,labelx,labely){
plot(x, ylim=range(min(x,y),max(x,y)),ylab="Valori", pch=19, col="red", main="Confronto distribuzioni", col.main="blue3",
font.main=18, cex.main=1.7, font.lab=18)
points(y, col="green3", pch=8)
leg.txt=c(labelx,labely)
legend("topright", leg.txt, pch=c(19,8), col=c("red","green3"))
}
confrontoDistribuzioni(x,y,"Popolazione1","Popolazione2")
#variabile quantitativa (con suddivisione in classi)
#' @title Distribuzioni di frequenza assoluta per variabili quantitative continue
#' @description Costruisce la distribuzione di frequenza assoluta del vettore passato in input.
#' @param Un vettore numerico, e il numero di classi nelle quali suddividere il vettore
#' @return Una tabella contenente la distribuzione assoluta ripartita in classi
#' @export
#' @examples
#' valori = rnorm(100, mean=165,sd=10)
#' freqQuantSemplice(valori,5)
freqQuantSemplice <- function(vettore,n){
r = range(vettore)
ampiezzaClassi = (r[2]-r[1])/n
classi=1:(n+1)
classi[1]=r[1]
for (i in 2:(n+1)){
classi[i]=classi[i-1]+ampiezzaClassi
}
classi[1]=classi[1]-0.001
classi[n+1]=classi[n+1]+0.001
return(table(cut(vettore, breaks = classi)))
}
freqQuantCumulata<-function(valore,n){
table<-freqQuantSemplice(valore,n)
for(i in 2:length(table)) {
table[i]=table[i-1]+table[i]
}
return(table)
}
#' @title Distribuzioni di frequenza relativa per variabili quantitative continue
#' @description Costruisce la distribuzione di frequenza relativa del vettore passato in input.
#' @param Un vettore numerico, e il numero di classi nelle quali suddividere il vettore
#' @return Una tabella contenente la distribuzione relativa ripartita in classi
#' @export
#' @examples
#' valori = rnorm(100, mean=165,sd=10)
#' freqQuantRelativa(valori,5)
freqQuantRelativa <- function(vettore,n){
return(freqQuantSemplice(vettore,n)/length(vettore))
}
v=rnorm(n = 50,mean = 160,sd = 10)
freqQuantCumulata(v,5)
length(v)
freqQuantRelativa(v,5)
freqQuantSemplice(v,5)
library(descrittive)
load("C:/Users/Dell E6440/Documents/prova2/.RData")
ls()
?freqQuantRelativa
confrontoDistribuzioni.Rd
devtools::document()
??descrittive
library(descrittive)
library(descrittive)
library(descrittive)
x=c(167,189,167,156,188,190,200,150,200,177)
v=c(20,23,20,12,13,17,19,16,15,10)
graficoMultiplo(x,v,"altezze","peso")
#' punti=c(3,4,5,7,8,5,4,3,2,4)
#' graficoMultiplo(f,punti,"Squadre","Punti")
graficoMultiplo <- function(x,y,labelx,labely){
plot(x,y, xlab=labelx, ylab=labely, col="darkmagenta", pch=17, asp=1,
font=12, fg="grey")
# asp mi fa ottenere un sistema monometrico
# cioè dove il rapporto tra le unità sui due assi è 1
#  abline(v=axTicks(1), h=axTicks(2), col="grey",lty=2)
mtext("Scatterplot", side=3, line=1, col="hotpink", font=2, cex=1.5)
graficoMultiplo(x,v,"altezze","peso")
}
graficoMultiplo <- function(x,y,labelx,labely){
plot(x,y, xlab=labelx, ylab=labely, col="darkmagenta", pch=17, asp=1,
font=12, fg="grey")
# asp mi fa ottenere un sistema monometrico
# cioè dove il rapporto tra le unità sui due assi è 1
#  abline(v=axTicks(1), h=axTicks(2), col="grey",lty=2)
mtext("Scatterplot", side=3, line=1, col="hotpink", font=2, cex=1.5)
}
graficoMultiplo(x,v,"altezze","peso")
y=c(rep("giallo",2), rep("verde",3),rep("blu",4), rep("rosso",5))
f=as.factor(y)
punti=c(3,4,5,7,8,5,4,3,2,4)
graficoMultiplo(f,punti,"Squadre","Punti")
punti=c(3,4,5,7,8,5,4,3,2,4,6,7,9,0)
graficoMultiplo(f,punti,"Squadre","Punti")
library(descrittive)
library(descrittive)
?descrittive
??descrittive
#' @title Confronto tra due distribuzioni
#' @description Sovrappone i plot di sue distribuzioni per vedere se hanno andamenti diversi.
#' @param x vettore numerico
#' @param y vettore numerico
#' @param labelx nome del primo vettore
#' @param labely nome del primo vettore.
#' @return Un grafico che rappresenta i due vettori consimboli diversi
#' @export
#' @examples
#' x=rnorm(100,mean=165,10)
#' x2=rnorm(90,mean=170,sd = 20)
#' confrontoDistribuzioni(x,x2,"Popolazione1","Popolazione2")
confrontoDistribuzioni <- function(x,y,labelx,labely){
plot(x, ylim=range(min(x,y),max(x,y)),ylab="Valori", pch=19, col="red", main="Confronto distribuzioni", col.main="blue3",
font.main=18, cex.main=1.7, font.lab=18)
points(y, col="green3", pch=8)
leg.txt=c(labelx,labely)
legend("topright", leg.txt, pch=c(19,8), col=c("red","green3"))
}
#' @title Rappresentazione grafica dei quantili di una distribuzione
#' @description Confronta la distribuzione cumulata della variabile osservata con la distribuzione cumulata della normale.
#' Se la variabile osservata presenta una distribuzione normale, i punti di questa distribuzione congiunta si addensano sulla diagonale che va dal basso verso l'alto e da sinistra verso destra.
#' Aggiunge anche una retta tra la distribuzione e i quantili dei dati.
#' @param x vettore numerico di cui vogliamo verificare la normalita'.
#' @return Un grafico dove vengono rappresentitati i punti del vettore e una retta che approssima la funzione normale.
#' Se i punti seguono la retta allora la distribuzione del vettore e' normale.
#' @export
#' @examples
#' x=rnorm(100,mean=165,10)
#' confrontoNormale(x)
#'
#' y=rchisq(20, 2, ncp = 0)
#' confrontoNormale(y)
confrontoNormale <- function(x){
qqnorm(x, pch=15, col="mediumblue", main="Confronto tra x e y~N(0,1)")
qqline(x, col=3, lwd=3, lty=2)
}
#' @title Diagramma a torta
#' @description Costruisce il diagramma a torta di un vettore.
#' @param x vettore numerico
#' @param lbls vettore di etichette di x (questi due vettori devono avere la stessa lunghezza).
#' @return Il grafico a torta del vettore numerico con le etichette associate.
#' @export
#' @examples
#' value=c(160,150,100,190,200)
#' label=c("Germania","Italia","Francia","Inghilterra","Austria")
#' graficoTorta(value,label)
graficoTorta <- function(x,lbls){
pct=round(x/sum(x)*100) #calcolo delle percentuali
lbls=paste(lbls, pct) # aggiungo il numero percentuale alle etichette
lbls=paste(lbls,"%",sep="") # aggiungo il simbolo % alle etichette
pie(x, labels = lbls, main="Grafico a torta", col=rainbow(length(lbls)),
col.main="red", font.main=8, cex.main=2)
}
#' @title Istogramma di un vettore numerico
#' @description Costruisce l'istogramma di un vettore, specificando il numero di classi desiderate.
#' @param x vettore numerico
#' @param xlabel etichetta specificante il nome di x
#' @param n numero di classi in cui suddividere l'istogramma.
#' @return Un istogramma che rappresenta il vettore.
#' @export
#' @examples
#' x=rnorm(100,mean=165,10)
#' istogramma(x,"Altezze",5)
istogramma <- function(x,xlabel,n){
#breaks=b esplicita i punti di break degli intervalli dei valori di x che delimitano le classi
#probability=TRUE le colonne rappresentano le frequenze relative e non assolute
#las=2 mette i valori delle frequenze relative in verticale
r = range(x)
ampiezzaClassi = (r[2]-r[1])/n
classi=1:(n+1)
classi[1]=r[1]
for (i in 2:(n+1)){
classi[i]=classi[i-1]+ampiezzaClassi
}
classi[1]=classi[1]-0.001
classi[n+1]=classi[n+1]+0.001
hist(x, breaks=classi, xlab=xlabel, ylab="Frequenze relative", probability = TRUE,
include.lowest = TRUE, col="slategray1", lty=4, las=1,
col.main="midnightblue", col.axis="midnightblue", fg="midnightblue", font.main=15,
font.lab=14, col.lab="midnightblue", border="midnightblue")
}
#' @title Grafico univariato
#' @description Grafico che rappresenta i punti con il loro indice.
#' Valido per dati quantitativi, sia per vettori che per matrici.
#' @param x vettore o una matrice
#' @param labelx etichetta del nome di x
#' @return Un grafico univariato (il tipo di grafico dipende dal vettore o matrice passati in input)
#' @export
#' @examples
#' x=c(167,189,167,156,188,190,200,150,200,177)
#' graficoSingolo(x,"Altezze")
#'
#' m=matrix(rnorm(n = 50,mean = 165,sd = 10),ncol=5)
#' graficoSingolo(m,"Altezze")
graficoSingolo <- function(x,labelx){
# 'lwd' è lo spessore dei punti
# 'cex.axis' è la dimensione dei numeri lungo gli assi
#pch mi fa i pallini pieni
grafico=plot(x, ylab=labelx, col=4, pch=19, cex.axis = 0.9, font=11,
fg="grey")
#mtext aggiugne il testo al grafico
# 'side' (da 1 a 4) ci dice lungo quale asse verrà posizionato
#il numero 1 è l'asse x, e poi procede in senso orario
# 'line' è l'interlinea dal grafico (maggiore è il numero maggiore è l'interlinea)
mtext(labelx, side=3, line=1, col=2, font=15, cex=1.5)
}
#' @title Grafico multivariato
#' @description Grafico che rappresenta i punti con il rispettivo indice.
#' ATTENZIONE: I VETTORI DEVONO AVERE LE STESSE DIMENSIONI.
#' Se utilizzo due vettori ottengo uno scatterplot normale.
#' Se utilizzo un fattore ed un vettore ottengo dei boxplot.
#' Il comando locator(1) puo' essere utilizzato per guardare le coordinate di un punto sul grafico.
#' @param x un vettore o un fattore
#' @param y un vettore
#' @param labelx etichetta che verra' associata ad x
#' @param labely etichetta che verra' associata ad y
#' @return Uno scatterplot o dei boxplot divisi per i vari livelli del fattore
#' @export
#' @examples
#' x=c(167,189,167,156,188,190,200,150,200,177)
#' v=c(20,23,20,12,13,17,19,16,15,10)
#' graficoMultiplo(x,v,"altezze","peso")
#'
#' y=c(rep("giallo",2), rep("verde",3),rep("blu",4), rep("rosso",5))
#' f=as.factor(y)
#' punti=c(3,4,5,7,8,5,4,3,2,4,6,7,9,0)
#' graficoMultiplo(f,punti,"Squadre","Punti")
graficoMultiplo <- function(x,y,labelx,labely){
plot(x,y, xlab=labelx, ylab=labely, col="darkmagenta", pch=17, asp=1,
font=12, fg="grey")
# asp mi fa ottenere un sistema monometrico
# cioè dove il rapporto tra le unità sui due assi è 1
#  abline(v=axTicks(1), h=axTicks(2), col="grey",lty=2)
mtext("Scatterplot", side=3, line=1, col="hotpink", font=2, cex=1.5)
}
#variabile quantitativa (con suddivisione in classi)
#' @title Distribuzioni di frequenza assoluta per variabili quantitative continue
#' @description Costruisce la distribuzione di frequenza assoluta del vettore passato in input.
#' @param vettore vettore numerico
#' @param n numero di classi nelle quali suddividere il vettore.
#' @return Una tabella contenente la distribuzione assoluta ripartita in classi.
#' @export
#' @examples
#' valori = rnorm(100, mean=165,sd=10)
#' freqQuantSemplice(valori,5)
freqQuantSemplice <- function(vettore,n){
r = range(vettore)
ampiezzaClassi = (r[2]-r[1])/n
classi=1:(n+1)
classi[1]=r[1]
for (i in 2:(n+1)){
classi[i]=classi[i-1]+ampiezzaClassi
}
classi[1]=classi[1]-0.001
classi[n+1]=classi[n+1]+0.001
return(table(cut(vettore, breaks = classi)))
}
freqQuantCumulata<-function(valore,n){
table<-freqQuantSemplice(valore,n)
for(i in 2:length(table)) {
table[i]=table[i-1]+table[i]
}
return(table)
}
#' @title Distribuzioni di frequenza relativa per variabili quantitative continue
#' @description Costruisce la distribuzione di frequenza relativa del vettore passato in input.
#' @param vettore vettore numerico
#' @param n numero di classi nelle quali suddividere il vettore.
#' @return Una tabella contenente la distribuzione relativa ripartita in classi.
#' @export
#' @examples
#' valori = rnorm(100, mean=165,sd=10)
#' freqQuantRelativa(valori,5)
freqQuantRelativa <- function(vettore,n){
return(freqQuantSemplice(vettore,n)/length(vettore))
}
#' @title Distribuzioni di frequenza assoluta per variabili discrete
#' @description Costruisce la distribuzione di frequenza assoluta del vettore passato in input.
#' Se la variabile in questione e' ordinale per avere l'ordine desiderato si consiglia
#' di eseguire la seguente istruzione:
#' vettore = factor(vettore, levels=c("primo valore","secondo valore",...))
#' @param vettore vettore numerico (ordinale o discreto) oppure un vettore nominale
#' @return Una tabella contenente la distribuzione assoluta
#' @export
#' @examples
#' altezze = c(rep(160,5),rep(175,10),rep(185,3), rep(190,2), 200, rep(178,8), rep(165,19),150)
#' freqSemplice(altezze)
#'
#' colori=c(rep("verde",10), "viola","viola","viola","viola", "indaco", "indaco", "indaco", rep("giallo",5), rep("blu", 8), rep("rosso",8), "rosa", "rosa", rep("arancione",7), "nero")
#' freqSemplice(colori)
#'
freqSemplice <- function(vettore){
return(table(vettore))
}
#' @title Distribuzioni di frequenza relativa per variabili discrete
#' @description Costruisce la distribuzione di frequenza relativa del vettore passato in input.
#' Se la variabile in questione e' ordinale per avere l'ordine desiderato si consiglia
#' di eseguire la seguente istruzione:
#' vettore = factor(vettore, levels=c("primo valore","secondo valore",...))
#' @param vettore vettore numerico (ordinale o discreto) oppure un vettore nominale
#' @return Una tabella contenente la distribuzione relativa
#' @export
#' @examples
#' altezze = c(rep(160,5),rep(175,10),rep(185,3), rep(190,2), 200, rep(178,8), rep(165,19),150)
#' freqRelativa(altezze)
#'
#' colori=c(rep("verde",10), "viola","viola","viola","viola", "indaco", "indaco", "indaco", rep("giallo",5), rep("blu", 8), rep("rosso",8), "rosa", "rosa", rep("arancione",7), "nero")
#' freqRelativa(colori)
#'
freqRelativa <- function(vettore){
return(freqSemplice(vettore)/length(vettore))
}
# Hello, world!
#
# This is an example function named 'hello'
# which prints 'Hello, world!'.
#
# You can learn more about package authoring with RStudio at:
#
#   http://r-pkgs.had.co.nz/
#
# Some useful keyboard shortcuts for package authoring:
#
#   Build and Reload Package:  'Ctrl + Shift + B'
#   Check Package:             'Ctrl + Shift + E'
#   Test Package:              'Ctrl + Shift + T'
hello <- function() {
print("Hello, world!")
}
library(descrittive)
#' @title Distribuzioni di frequenza assoluta per variabili discrete
#' @description Costruisce la distribuzione di frequenza assoluta del vettore passato in input.
#' Se la variabile in questione e' ordinale per avere l'ordine desiderato si consiglia
#' di eseguire la seguente istruzione:
#' vettore = factor(vettore, levels=c("primo valore","secondo valore",...))
#' @param vettore vettore numerico (ordinale o discreto) oppure un vettore nominale
#' @return Una tabella contenente la distribuzione assoluta
#' @export
#' @examples
#' altezze = c(rep(160,5),rep(175,10),rep(185,3), rep(190,2), 200, rep(178,8), rep(165,19),150)
#' freqSemplice(altezze)
#'
#' colori=c(rep("verde",10), "viola","viola","viola","viola", "indaco", "indaco", "indaco", rep("giallo",5), rep("blu", 8), rep("rosso",8), "rosa", "rosa", rep("arancione",7), "nero")
#' freqSemplice(colori)
#'
freqSemplice <- function(vettore){
return(table(vettore))
}
#' @title Distribuzioni di frequenza relativa per variabili discrete
#' @description Costruisce la distribuzione di frequenza relativa del vettore passato in input.
#' Se la variabile in questione e' ordinale per avere l'ordine desiderato si consiglia
#' di eseguire la seguente istruzione:
#' vettore = factor(vettore, levels=c("primo valore","secondo valore",...))
#' @param vettore vettore numerico (ordinale o discreto) oppure un vettore nominale
#' @return Una tabella contenente la distribuzione relativa
#' @export
#' @examples
#' altezze = c(rep(160,5),rep(175,10),rep(185,3),rep(190,2),200,rep(178,8),rep(165,19),150)
#' freqRelativa(altezze)
#'
#' colori=c(rep("verde",10),rep("viola",4),rep("indaco",3),rep("giallo",5), rep("blu", 8),rep("rosso",8),rep("rosa",2),rep("arancione",7))
#' freqRelativa(colori)
#'
freqRelativa <- function(vettore){
return(freqSemplice(vettore)/length(vettore))
}
library(descrittive)
#' @title Distribuzioni di frequenza assoluta per variabili discrete
#' @description Costruisce la distribuzione di frequenza assoluta del vettore passato in input.
#' Se la variabile in questione e' ordinale per avere l'ordine desiderato si consiglia
#' di eseguire la seguente istruzione:
#' vettore = factor(vettore, levels=c("primo valore","secondo valore",...))
#' @param vettore vettore numerico (ordinale o discreto) oppure un vettore nominale
#' @return Una tabella contenente la distribuzione assoluta
#' @export
#' @examples
#' altezze = c(rep(160,5),rep(175,10),rep(185,3),rep(190,2),200,rep(178,8),rep(165,19),150)
#' freqSemplice(altezze)
#'
#' colori=c(rep("verde",10),rep("viola",4),rep("indaco",3),rep("giallo",5), rep("blu", 8),rep("rosso",8))
#' freqSemplice(colori)
#'
freqSemplice <- function(vettore){
return(table(vettore))
}
#' @title Distribuzioni di frequenza relativa per variabili discrete
#' @description Costruisce la distribuzione di frequenza relativa del vettore passato in input.
#' Se la variabile in questione e' ordinale per avere l'ordine desiderato si consiglia
#' di eseguire la seguente istruzione:
#' vettore = factor(vettore, levels=c("primo valore","secondo valore",...))
#' @param vettore vettore numerico (ordinale o discreto) oppure un vettore nominale
#' @return Una tabella contenente la distribuzione relativa
#' @export
#' @examples
#' altezze = c(rep(160,5),rep(175,10),rep(185,3),rep(190,2),200,rep(178,8),rep(165,19),150)
#' freqRelativa(altezze)
#'
#' colori=c(rep("verde",10),rep("viola",4),rep("indaco",3),rep("giallo",5), rep("blu", 8),rep("rosso",8))
#' freqRelativa(colori)
#'
freqRelativa <- function(vettore){
return(freqSemplice(vettore)/length(vettore))
}
library(descrittive)
wanings()
warnings()
library(descrittive)
library(descrittive)
remove.packages("devtools", lib="~/R/win-library/3.2")
?descrittive
??descrittive
